"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2313],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,f=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3326:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:4},o="Initialising slice",c={unversionedId:"basics/initilizing-slice",id:"basics/initilizing-slice",title:"Initialising slice",description:"Creating reducer slice",source:"@site/docs/basics/initilizing-slice.md",sourceDirName:"basics",slug:"/basics/initilizing-slice",permalink:"/docs/basics/initilizing-slice",draft:!1,editUrl:"https://github.com/ds-fancode/redux-rewire/blob/main/documentation/docs/basics/initilizing-slice.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebarAPI",previous:{title:"Creating slices",permalink:"/docs/basics/creating-slices"},next:{title:"API",permalink:"/docs/category/api-1"}},s={},l=[{value:"Creating reducer slice",id:"creating-reducer-slice",level:3},{value:"Creating action slice",id:"creating-action-slice",level:3}],d={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initialising-slice"},"Initialising slice"),(0,i.kt)("h3",{id:"creating-reducer-slice"},"Creating reducer slice"),(0,i.kt)("p",null,"Reducer slice is the place where we define all the actions that will update the state of the\ncomponent. It is a pure function that takes the current state and an action,\nand returns the updated state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="./todo-store.reducer.ts"',title:'"./todo-store.reducer.ts"'},"import { createReducerSlice } from 'redux-rewire';\n\nexport const todoStoreReducer = createReducerSlice(todoStoreInitialState, {\n  mount: (state, listId: number) => {\n    state.mounted = true\n    state.listId = listId\n    return state\n  },\n  updateTodoList: (state, todoList: Todo[]) => {\n    state.todoList = todoList\n    return state\n  }\n})\n")),(0,i.kt)("p",null,"In the above code snippet, we have created a reducer slice with two actions ",(0,i.kt)("inlineCode",{parentName:"p"},"mount")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"updateTodoList"),".\n",(0,i.kt)("inlineCode",{parentName:"p"},"mount")," action will be called when the component is mounted and ",(0,i.kt)("inlineCode",{parentName:"p"},"updateTodoList")," will be called when we receive the\ntodo list from the backend api call. As we can see all the actions handlers are\ninjected with the current component state and actionData is the data passed by the caller.\nLater in the tutorial we will see how these actions are called from the component."),(0,i.kt)("h3",{id:"creating-action-slice"},"Creating action slice"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="./todo-store.actions.ts"',title:'"./todo-store.actions.ts"'},'import {createActionSlice} from \'redux-rewire\'\n// todoStoreReducer is basically reducer slice we have created above\nimport {todoStoreReducer} from \'./todo-store.reducer\'\n\nexport const todoStoreAction = createActionSlice(todoStoreReducer, {\n  mount: async (actionData, {actions}) => {\n    // make api call\n    const response = await fetch("https://yourdomain.com/get/user/todo/list")\n    const jsonData = await response.json()\n    // set data from api call into state\n    actions.updateTodoList(jsonData) \n  },\n  updateTodoList: async (state, todoList: Todo[]) => {\n    /**\n     * send analytics once todo list is loaded\n     */\n    const response = await fetch("https://yourdomain.com/track", {data: todoList})\n    return true\n  },\n  track: async (state, data: any) => {\n    /**\n     * send any analytics using this action\n     */\n    const response = await fetch("https://yourdomain.com/track", {data})\n    return true\n  }\n})\n')))}p.isMDXComponent=!0}}]);