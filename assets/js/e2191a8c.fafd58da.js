"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1299],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8328:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2},o="Create Reducer Slice",l={unversionedId:"API/create-reducer-slice",id:"API/create-reducer-slice",title:"Create Reducer Slice",description:"Here we define pure functions for the component that updates the state of the component.",source:"@site/docs/API/create-reducer-slice.md",sourceDirName:"API",slug:"/API/create-reducer-slice",permalink:"/redux-rewire/docs/API/create-reducer-slice",draft:!1,editUrl:"https://github.com/ds-fancode/redux-rewire/blob/main/documentation/docs/API/create-reducer-slice.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebarAPI",previous:{title:"Create Initial State",permalink:"/redux-rewire/docs/API/create-initial-state"},next:{title:"Create Action Slice",permalink:"/redux-rewire/docs/API/create-action-slice"}},c={},s=[{value:"Arguments",id:"arguments",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-reducer-slice"},"Create Reducer Slice"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Here we define pure functions for the component that updates the state of the component.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="to-do-component.reducer.ts"',title:'"to-do-component.reducer.ts"'},'import { createReducerSlice } from "redux-rewire";\nimport { initialState } from "./to-do-component.init"; // import init from file generated in step 1\n\n// The intial state created in the homeScreen.init.ts\nexport const reducerSlice = createReducerSlice(initialState, {\n  // @state is the latest state of the to-do component\n  // @actionData is the data passed while calling from to-do component\n  addInitialToDos: (state, actionData: string[], otherData: {\n    reduxKey: string, // component key reference used in the global state.\n    globalState: object // global state\n  }) => {\n    state.list = actionData;\n    return state;\n  },\n  add: (state, actionData: string, otherData: {\n    componentKey: string, // component key reference used in the global state\n    globalState: any // global state\n  }) => {\n    state.list.push(actionData);\n    return state;\n  },\n});\n')),(0,a.kt)("h2",{id:"arguments"},"Arguments"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"initialState")))),(0,a.kt)("p",null,"Initial state returned from ",(0,a.kt)("inlineCode",{parentName:"p"},"createInitialState"),". This helps in providing state and its type to reducer pure functions."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Since we believe in composition, we are passing return type of last definition")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"strong"},"reducerMap")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Key value pair, to define pure functions of reducers"),(0,a.kt)("li",{parentName:"ul"},"Each function provides 3 arguments",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"state")," - State of the current component (this is a draft state from ",(0,a.kt)("inlineCode",{parentName:"li"},"immer")," lib we have used)"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"actionData")," - Define type of actionData, this type definition is enforced when we call reducer action from inside view"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"otherData")," - This contains additional data you may use.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"reduxKey")," - This is the final key of the component against which redux has stored this component latest state."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"globalState")," -  This contains whole redux state, we got using ",(0,a.kt)("inlineCode",{parentName:"li"},"getState()")," api of redux.")))))))}d.isMDXComponent=!0}}]);