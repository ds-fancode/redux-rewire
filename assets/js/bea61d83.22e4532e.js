"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2805],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?i.createElement(f,o(o({ref:t},p),{},{components:n})):i.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:a,o[1]=c;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3711:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:2},o="Quick start",c={unversionedId:"basics/usage-guide",id:"basics/usage-guide",title:"Quick start",description:"The Usage Guides section provides practical guidance on how to correctly use Redux in real-world applications, React or React-Native.",source:"@site/docs/basics/usage-guide.md",sourceDirName:"basics",slug:"/basics/usage-guide",permalink:"/docs/basics/usage-guide",draft:!1,editUrl:"https://github.com/ds-fancode/redux-rewire/blob/main/documentation/docs/basics/usage-guide.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebarAPI",previous:{title:"Installation",permalink:"/docs/basics/installation"},next:{title:"Structure",permalink:"/docs/basics/structure"}},l={},s=[{value:"Installation",id:"installation",level:2},{value:"Initialize the store at the root of your application",id:"initialize-the-store-at-the-root-of-your-application",level:2},{value:"1. Init - <code>createInitialState</code>",id:"1-init---createinitialstate",level:2},{value:"2. Reducer - <code>createReducerSlice</code>",id:"2-reducer---createreducerslice",level:2},{value:"3. Action - <code>createActionSlice</code>",id:"3-action---createactionslice",level:2},{value:"4. View - <code>useRewireState</code>",id:"4-view---userewirestate",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quick-start"},"Quick start"),(0,a.kt)("p",null,"The Usage Guides section provides practical guidance on how to correctly use Redux in real-world applications, React or React-Native."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Install Redux-Rewire in your project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install redux-rewire --save-prod\n")),(0,a.kt)("p",null,"OR"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add redux-rewire -S\n")),(0,a.kt)("h2",{id:"initialize-the-store-at-the-root-of-your-application"},"Initialize the store at the root of your application"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app-root.tsx"',title:'"app-root.tsx"'},'import { configureStore, RewireProvider } from "redux-rewire";\n\nfunction App() {\n  const initialReducers = {} // can we empty initially\n  const initialState = {} // can we empty initially\n  const store = configureStore(initialReducers, initialState, {\n    middlewares: [reduxLogger] // We can pass middlewares to the redux\n  });\n\n  return (\n    <React.StrictMode>\n      <RewireProvider store={store}>\n        <AppRoutes />\n      </RewireProvider>\n    </React.StrictMode>\n  );\n}\n\nexport default App;\n')),(0,a.kt)("p",null,"Here, we are using two functions provided by redux-rewire"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"RewireProvider")," The application has to be wrapped with RewireProvider at the root layer."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"configureStore")," is a wrapper utility for creating an application store that takes the initial state, reducers for updating the state, and any middleware needed for extending application functioning.")),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"configure-a-screenpagecomponent"},"Configure a Screen/Page/Component"),(0,a.kt)("h2",{id:"1-init---createinitialstate"},"1. Init - ",(0,a.kt)("inlineCode",{parentName:"h2"},"createInitialState")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Defines the initial state and the corresponding types")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="to-do-component.init.ts"',title:'"to-do-component.init.ts"'},"import {createInitialState} from 'redux-rewire'\n\ninterface InitialStateType { data: string[] }\n\nexport const initialState = createInitialState<InitialStateType>(\"to-do-key\",{\n  data: [],\n});\n")),(0,a.kt)("h2",{id:"2-reducer---createreducerslice"},"2. Reducer - ",(0,a.kt)("inlineCode",{parentName:"h2"},"createReducerSlice")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Here we define pure functions for the component that updates the state of the component.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="to-do-component.reducer.ts"',title:'"to-do-component.reducer.ts"'},'import { createReducerSlice } from "redux-rewire";\nimport { initialState } from "./to-do-component.init"; // import init from file generated in step 1\n\n// The intial state created in the homeScreen.init.ts\nexport const reducerSlice = createReducerSlice(initialState, {\n  // @state is the latest state of the to-do component\n  // @actionData is the data passed while calling from to-do component\n  addInitialToDos: (state, actionData: string[], otherData: {\n    componentKey: string, // component key reference used in the global state.\n    globalState: object // global state\n  }) => {\n    state.list = actionData;\n    return state;\n  },\n  add: (state, actionData: string, otherData: {\n    componentKey: string, // component key reference used in the global state\n    globalState: any // global state\n  }) => {\n    state.list.push(actionData);\n    return state;\n  },\n});\n')),(0,a.kt)("h2",{id:"3-action---createactionslice"},"3. Action - ",(0,a.kt)("inlineCode",{parentName:"h2"},"createActionSlice")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"This file defines the side effects (async calls) for the components such as making analytics call or updating local storage.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="to-do-component.action.ts"',title:'"to-do-component.action.ts"'},'import { createActionSlice } from "redux-rewire";\nimport {  reducerSlice } from "./to-do-component.reducer"; // import reducerSlice from file generated in step 2\nexport const actionSlice = createActionSlice(reducerSlice, {\n  mount: async (actionData: string, otherData: {\n    state: InitialStateType, // Updated state of the component\n    actions: { mount: (data: string) => {}}, // contains all the list of actions\n    reduxKey: string, // component key reference used in the global state\n    globalState: any, // global state\n    prevState: InitialStateType, // component previous state\n  }) => {\n\n    // The following array returned has nothing to do with redux-rewire,\n    // it is application specific\n    const toDoList = await getInitialTodosFromBackend()\n    actions.addInitialToDos(toDoList)\n    return\n  },\n});\n')),(0,a.kt)("h2",{id:"4-view---userewirestate"},"4. View - ",(0,a.kt)("inlineCode",{parentName:"h2"},"useRewireState")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"useRewireState is used to initialize the component state at the runtime, and makes state and actions accessible inside your view.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Key"),": string that will be added in the global store and has to be unique.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="to-do-component.view.tsx"',title:'"to-do-component.view.tsx"'},"import {identitySelector, useRewireState} from 'redux-rewire'\nimport {actionSlice} from \"./to-do-component.action\"; // import actionSlice from file generated in step 2\nimport {useCallback, useRef} from 'react'\nconst ToDoComponent = (props) => {\n  // initializing the state for the component\n  const [key, state, actions] = useRewireState(\n    'todo-key' + props.someUniqueValueOrIndex, // unique key for the component\n    actionSlice,\n    identitySelector\n  )\n  const inputRef = useRef()\n  const addToDo = useCallback(() => {\n    if (inputRef.current) {\n      const value = inputRef.current.value\n      actions.add(value)\n    }\n  }, [actions])\n  return (\n    <div >\n      <div>\n        <input ref={inputRef} />\n        <button onClick={addToDo}>ADD TO-DO</button>\n      </div>\n      <div>\n        {/* using values from the state to render the JSX */}\n        {state.list.map((v) => {\n          return <div className={'item'}>Test</div>\n        })}\n        {state.list.length === 0 ? <div>Your To Do list is empty</div> : null}\n      </div>\n    </div>\n  )\n}\nexport default ToDoComponent\n")))}u.isMDXComponent=!0}}]);